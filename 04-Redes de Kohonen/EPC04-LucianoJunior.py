# -*- coding: utf-8 -*-
"""EPC04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14AZQ1s1o1d09YJo3V0RBi9meepnc5I7i

1- Biblioteca
"""

#!pip install minisom

"""2- Treinamento"""

from minisom import MiniSom

import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

##Função de ler dados##
def ler_data(dataset):
  arquivo= open(dataset)
  dados = []
  aux_x = []

  for linha in arquivo.readlines():
    dados.append(linha.split(', '))

  for i in range(9, len(dados)):
    aux_x.append([dados[i][0], dados[i][1], dados[i][2], dados[i][3]])
    

  return aux_x

scaler = MinMaxScaler()
X = ler_data('iris-10-7tra.dat')
X = scaler.fit_transform(X)

#TOPOLOGIA 1
som1= MiniSom(7, 7, 4, learning_rate = 0.01)
som1.random_weights_init(X)
som1.train(X, 1000000)

#TOPOLOGIA 2
som2= MiniSom(8, 8, 4, learning_rate = 0.01)
som2.random_weights_init(X)
som2.train(X, 1000000)

#TOPOLOGIA 3
som3= MiniSom(10, 10, 4, learning_rate = 0.01)
som3.random_weights_init(X)
som3.train(X, 1000000)

"""3-Matriz-U"""

fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20,5))
img_1 = ax1.imshow(som1.distance_map(), cmap='coolwarm', interpolation='sinc')
plt.colorbar(img_1,ax=ax1)
img_2 = ax2.imshow(som2.distance_map(), cmap='coolwarm', interpolation='sinc')
plt.colorbar(img_2,ax=ax2)
img_3 = ax3.imshow(som3.distance_map(), cmap='coolwarm', interpolation='sinc')
plt.colorbar(img_3,ax=ax3)
plt.show()

"""4-K-means"""

aux = []
for j in range(som2.get_weights().shape[0]):
  for k in range(som2.get_weights().shape[1]):
    aux.append(som2.get_weights()[j][k])

kmeans = KMeans(n_clusters = 3).fit(aux)

weights_classes = np.array(kmeans.labels_)
weights_classes = weights_classes.reshape(som2.get_weights().shape[0], som2.get_weights().shape[1])
centros = np.array(kmeans.cluster_centers_)

"""5- Teste"""

X_test = ler_data('iris-10-7tst.dat')
X_test = scaler.fit_transform(X_test)
teste = kmeans.predict(X_test)

print('Classificação através dos dados de teste: ', teste)
plt.scatter(X_test[:, 0], X_test[:, 1], c=teste)
plt.show()

print('Classes dos neurônios: \n', weights_classes)
print('Centros: \n', centros)
plt.scatter(som2.get_weights().T[0], som2.get_weights().T[1], color='b')
plt.scatter(X_test.T[0], X_test.T[1], color='g')
plt.scatter(centros.T[0], centros.T[1], edgecolors='b', color='r')
plt.show()